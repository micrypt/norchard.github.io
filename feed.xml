<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Nicole Orchard</title>
		<description>Nicole Orchard</description>
		<link>https://nicoleorchard.com</link>
		<atom:link href="https://nicoleorchard.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Package Managers</title>
				<description>&lt;p&gt;If you want to draw for the first time, someone might hand you a piece of paper and a pencil. They won’t spend time discussing where the paper and pencil came from. Instead, they’ll tell you about line, form, and negative space. If you want to write a Python program for the first time, someone might run the following commands on your machine:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt install python3
$ pip3 install ipython
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then they would open iPython and show you some basic Python syntax.&lt;/p&gt;

&lt;p&gt;Package management is often glossed over because programming is the writing of programs, not the installing of programs. However, programming is also the organization of programs… and it actually &lt;em&gt;is&lt;/em&gt; the installing of programs, sometimes. After spending over a year installing and uninstalling (but mostly installing) packages using brew, gem, and npm on my mac, I finally learned how package managers work on a virtual machine running Ubuntu. Understanding how package management works was a pretty satisfying ‘aha!’ moment for me, so I hope it is for you too.&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-package-manager&quot;&gt;What is a Package Manager?&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;A &lt;em&gt;package manager&lt;/em&gt; keeps track of what software is installed on your computer, and allows  you to easily install new software, upgrade software to newer versions, or remove software that you previously installed. As the name suggests, package managers deal with &lt;em&gt;packages&lt;/em&gt;: collections of files that are bundled together and can be installed and removed as a group.
– &lt;a href=&quot;http://aptitude.alioth.debian.org/doc/en/pr01s02.html&quot;&gt;Aptitude User Manual&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are essentially two types of package managers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;System-level package managers&lt;/strong&gt; are highly integrated into the operating system.
  Ubuntu is a flavor of the Debian Linux distribution, which means it uses &lt;code class=&quot;highlighter-rouge&quot;&gt;dpkg&lt;/code&gt;, the Debian package manager. &lt;code class=&quot;highlighter-rouge&quot;&gt;dpkg&lt;/code&gt; is a low level tool that is used to install, remove, and provide information about individual .deb packages. Some packages depend on other packages, but &lt;code class=&quot;highlighter-rouge&quot;&gt;dpkg&lt;/code&gt; doesn’t manage dependencies. User friendly frontend tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; manage package dependencies and versioning decisions. Both &lt;code class=&quot;highlighter-rouge&quot;&gt;dpkg&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; come pre-installed with Ubuntu. &lt;code class=&quot;highlighter-rouge&quot;&gt;aptitude&lt;/code&gt; is another frontend to &lt;code class=&quot;highlighter-rouge&quot;&gt;dpkg&lt;/code&gt; based on &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt;, with some additional functionality. You can install &lt;code class=&quot;highlighter-rouge&quot;&gt;aptitude&lt;/code&gt; by running &lt;code class=&quot;highlighter-rouge&quot;&gt;apt install aptitude&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Language-specific package managers&lt;/strong&gt; manage one programming language’s libraries and are operating system independent.
  RubyGems is a package manager for the Ruby programming language. It manages installation, dependencies, and versioning of Ruby packages, called gems. &lt;a href=&quot;http://guides.rubygems.org/what-is-a-gem/&quot;&gt;Ruby gems&lt;/a&gt; include code, documentation, and a gemspec file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;search&quot;&gt;Search&lt;/h3&gt;
&lt;p&gt;When I needed to install Ruby to run a script on my VM, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;aptitude&lt;/code&gt; to search for a Ruby package.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aptitude search ruby
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;My search returned a long list of .deb packages containing the word ‘ruby’. Where did this list come from? A file called &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apt/sources.list&lt;/code&gt; shows the source endpoint for both &lt;code class=&quot;highlighter-rouge&quot;&gt;deb&lt;/code&gt; packages, which are binary files, and &lt;code class=&quot;highlighter-rouge&quot;&gt;deb-src&lt;/code&gt; packages, which are source files.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-small&quot;&gt;deb http://mirrors.digitalocean.com/ubuntu/ xenial main restricted
deb-src http://mirrors.digitalocean.com/ubuntu/ xenial main restricted
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My VM is a DigitalOcean Droplet, so the source url is an Ubuntu mirror hosted by DigitalOcean. A mirror is just a duplicate of a canonical package archive. Ubuntu keeps &lt;a href=&quot;https://launchpad.net/ubuntu/+archivemirrors&quot;&gt;a list of registered mirrors&lt;/a&gt; that are open to use by the general public. DigitalOcean’s mirror isn’t on that list because it is only intended to be used by DigitalOcean Droplets. Anyone can &lt;a href=&quot;https://help.ubuntu.com/community/Rsyncmirror&quot;&gt;create a mirror&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;In order to install the latest version of Ruby (2.3) I could run either of two commands:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aptitude install ruby2.3
$ aptitude install ruby
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I chose to run the second because it installs the default version of Ruby, which is currently 2.3, but could change in the future. Upon running the install command I received this prompt:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-small&quot;&gt;root@ubuntu:~# aptitude install ruby
The following NEW packages will be installed:
  fonts-lato{a} javascript-common{a} libjs-jquery{a} libruby2.3{a}
  rake{a} ruby ruby-did-you-mean{a} ruby-minitest{a}
  ruby-net-telnet{a} ruby-power-assert{a} ruby-test-unit{a}
  ruby2.3{a} rubygems-integration{a} unzip{a} zip{a}
0 packages upgraded, 15 newly installed, 0 to remove and 22 not upgraded. Need to get 0 B/6,359 kB of archives. After unpacking 28.6 MB will be used.
Do you want to continue? [Y/n/?]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those are Ruby’s dependencies! Some of them seem like nonsense. I’m not sure why Ruby needs Lato, but others are logical, like the Ruby library and Rake, which is Ruby’s build automation tool (think Ruby Make).&lt;/p&gt;

&lt;h3 id=&quot;organization&quot;&gt;Organization&lt;/h3&gt;
&lt;p&gt;Once the install completes, the Ruby binary file is located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt;. If you run &lt;code class=&quot;highlighter-rouge&quot;&gt;echo $PATH&lt;/code&gt; you can see the search path that is traversed when you run a program from the command line. Mine is the default for Ubuntu:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; contains binary programs that are necessary for basic functionality, like booting and repairing the system.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt; is where distribution managed packages are installed – so anything you would install with &lt;code class=&quot;highlighter-rouge&quot;&gt;aptitude install&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt; is where user-installed packages go, including packages installed by language-specific package managers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sbin&lt;/code&gt; is where packages that need to be run as root are installed. Now my VM can run &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby my_script.rb&lt;/code&gt; because it will find an executable Ruby program in &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;gems&quot;&gt;Gems&lt;/h3&gt;
&lt;p&gt;Actually, my VM couldn’t run my script just yet because I also needed a Ruby gem called &lt;code class=&quot;highlighter-rouge&quot;&gt;dotenv&lt;/code&gt; to load environment variables into my script. I found it using &lt;code class=&quot;highlighter-rouge&quot;&gt;gem search&lt;/code&gt; and installed it with &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install dotenv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Where do gems come from and where are they installed? You can find out by running &lt;code class=&quot;highlighter-rouge&quot;&gt;gem environment&lt;/code&gt;. Among other environment variables, you’ll see:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- INSTALLATION DIRECTORY: /var/lib/gems/2.3.0
- EXECUTABLE DIRECTORY: /usr/local/bin
- REMOTE SOURCES:
   - https://rubygems.org/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The gem source address is &lt;code class=&quot;highlighter-rouge&quot;&gt;https://rubygems.org/&lt;/code&gt;, but you can add other sources, or &lt;a href=&quot;https://github.com/rubygems/rubygems-mirror&quot;&gt;create a local mirror&lt;/a&gt;. RubyGems is a language-specific package manager, so executable files are installed at &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt;. After installing the dotenv gem, I have a &lt;code class=&quot;highlighter-rouge&quot;&gt;dotenv&lt;/code&gt; executable file in &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt;. The gem itself is installed in &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/gems/[ruby-version-number]&lt;/code&gt;. Now I can use the gem by requiring it in my script or I can run the executable at the command-line.&lt;/p&gt;

&lt;h3 id=&quot;help&quot;&gt;Help&lt;/h3&gt;
&lt;p&gt;Most package managers have pretty similar command-line interfaces, including &lt;code class=&quot;highlighter-rouge&quot;&gt;search&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;uninstall&lt;/code&gt;. However, some have slightly different commands and functionality, so it always &lt;em&gt;helps&lt;/em&gt; to run &lt;code class=&quot;highlighter-rouge&quot;&gt;-h&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-help&lt;/code&gt; to get familiar with your package manager’s UI.&lt;/p&gt;

&lt;h3 id=&quot;super-cow-powers&quot;&gt;Super Cow Powers&lt;/h3&gt;
&lt;p&gt;When you run &lt;code class=&quot;highlighter-rouge&quot;&gt;aptitude -h&lt;/code&gt; the output will also tell you, following a list of valid usage, actions, and options, that aptitude “does not have Super Cow Powers”.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-small&quot;&gt;Actions:
install   - Install/upgrade packages.
remove    - Remove packages.
...
Options:
 -v         Display extra information. (may be supplied multiple times).
...
This aptitude does not have Super Cow Powers.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; &lt;em&gt;does&lt;/em&gt; have super cow powers:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ubuntu:~# apt moo
                 (__)
                 (oo)
           /------\/
          / |    ||
         *  /\---/\
            ~~   ~~
...&quot;Have you mooed today?&quot;...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Although &lt;code class=&quot;highlighter-rouge&quot;&gt;aptitude&lt;/code&gt; doesn’t have super cow powers, if you persist you might be rewarded with a drawing.&lt;/p&gt;
</description>
				<pubDate>Thu, 22 Jun 2017 00:00:00 -0400</pubDate>
				<link>https://nicoleorchard.com/blog/package-managers</link>
				<guid isPermaLink="true">https://nicoleorchard.com/blog/package-managers</guid>
			</item>
		
			<item>
				<title>What Should I Work On?</title>
				<description>&lt;p&gt;Last year I was a web designer with a time-consuming programming pastime. In August I left my job to travel and study full-time. This post is about what I learned from nine months of self-study and the resources I used.&lt;/p&gt;

&lt;h3 id=&quot;bootcamps-might-not-be-for-you&quot;&gt;Bootcamps might not be for you&lt;/h3&gt;
&lt;p&gt;Bootcamps are great for people with financial resources who want to dive into web development without previous technical experience. I opted out of doing a bootcamp for three reasons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;They are expensive.&lt;/li&gt;
  &lt;li&gt;I already knew HTML, CSS, and some Javascript. Part of any bootcamp’s curriculum would have been redundant for me.&lt;/li&gt;
  &lt;li&gt;Bootcamps tend to focus on web-dev-specific tools, not computer science fundamentals.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;self-study-is-free-but-hard&quot;&gt;Self-study is free, but hard&lt;/h3&gt;
&lt;p&gt;Self-discipline can be an obstacle to self-study, but it’s a straightforward one. You have a list of things you want to accomplish. Maybe you reward yourself for checking items off your list: Do your to-dos; eat some ice cream.&lt;/p&gt;

&lt;p&gt;Self-structure is a less straightforward obstacle. How do you decide what to put on your list? Usually, you have high-level goals that you need to break down into manageable to-dos. I want to become a web developer. Should I learn Python? Should I learn Ruby? What is React??&lt;/p&gt;

&lt;p&gt;Being an absolute beginner to programming is kind of like looking at the earth from space while planning a journey across it. Blue, green, and brown forms might hint at what’s down there, but they don’t give you much insight into navigating the landscape. There are steep mountains and angry oceans (programming is hard!) and knowing where to start and what direction to move in can make the difference between floundering for months and making significant progress (I’ve done both.)&lt;/p&gt;

&lt;h3 id=&quot;a-few-pointers-go-a-long-way&quot;&gt;A few pointers go a long way&lt;/h3&gt;
&lt;p&gt;This is where help comes in! Ask someone with a lot of programming experience for guidance. I am not that person, but I will pass on advice from much smarter and more experienced people than myself:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://computers.tutsplus.com/tutorials/navigating-the-terminal-a-gentle-introduction--mac-3855&quot;&gt;Get comfortable using your terminal&lt;/a&gt;. Start with creating and navigating directories using &lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. Read the man pages!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pick one language and learn it well. This could be Ruby, Python, Javascript. Some languages lend themselves better to particular applications because of their communities, but all of them use similar logic. Last year I knew how to write Javascript from mimicking tutorials, but I didn’t really understand how it worked. A lot of beginners echo this sentiment. Tutorials feel productive because you end up with a finished product, but they won’t teach you how to program. Find a introductory book for your language and read it cover to cover. Run example programs on your machine. (The first language I learned well was C. I really enjoyed learning C because the language taught me about memory management. If you’re not interested in low level topics, pick Ruby or Python.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write as much code as you can and don’t stress over finding the perfect project. You can find exercises on sites like &lt;a href=&quot;www.hackerrank.com&quot;&gt;HackerRank&lt;/a&gt; or &lt;a href=&quot;leetcode.com&quot;&gt;Leetcode&lt;/a&gt;. For starter projects implement games like tic-tac-toe, rock-paper-scissors, or connect four. Online courses are good for having access to problem sets. (Video lectures also serve as a nice break from reading, but you should still read a book!)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Forget frameworks. (React is a framework!) I tried to learn Ruby on Rails before having a strong command of Ruby. It was overwhelming and distracting. Instead, write small programs from scratch. For web applications, use a microframework like Sinatra for Ruby or Flask for Python.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Read the docs! There is well maintained documentation for the language you are learning or that new library you are using. While it’s tempting to start with a blog post or a tutorial (I know documentation sometimes feels like a dry instruction manual), spending a little more time with the docs always pays off.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bugs are a great way to learn. Embrace them and remember that the answer is almost always in the error message. This is something that I re-learn on a weekly basis.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;find-resources-you-love&quot;&gt;Find resources you love&lt;/h3&gt;
&lt;p&gt;Don’t stick with a resource if you are miserable. There are so many resources readily available online. Every programming book I’ve read was delightful in some way. Don’t read a boring book! I’ve waded through a lot of online courses and books. Here’s the stuff that worked for me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.edx.org/course/introduction-computer-science-harvardx-cs50x&quot;&gt;Harvard’s CS50 course&lt;/a&gt; is an amazing introduction to computer science complete with lectures, problem sets, reading material, and an IDE. It covers topics ranging from search algorithms to web development. David Malan is brilliant in his ability to simplify and gamify complex topics for the computer science beginner. Take advantage and do all the problem sets—this is the most structure you’ll get while studying on your own.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Programming-3rd-Stephen-G-Kochan/dp/0672326663&quot;&gt;Programming in C&lt;/a&gt; is a succinct introduction to C and a great accompaniment to CS50. I started out reading C Programming Absolute Beginner’s Guide, but it was too slow for me. Pick what works for you!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Cuckoos-Egg-Tracking-Computer-Espionage/dp/1416507787&quot;&gt;The Cuckoo’s Egg&lt;/a&gt; is a true crime novel about tracking hackers in the 1970’s. Anyone who thinks computing can’t be dramatic needs to read this book. It’s a really fun read when you are learning C because the technology is so dated—it’s easy to understand the systems Stoll is working on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://pages.cs.wisc.edu/~remzi/OSTEP/&quot;&gt;The Comet Book&lt;/a&gt; is an awesome resource for learning about operating systems and a great technical reference. I skipped around in it while following along with lectures from Berkeley’s Introduction to Operating Systems. I recently came back to the Event Based Concurrency chapter while learning about the difference between Nginx and Apache servers. It is really well written.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://poignant.guide/&quot;&gt;Why’s Poignant Guide to Ruby&lt;/a&gt; is a whimsical illustrated overview of the Ruby language. I picked up some cool tricks for remembering syntax, like that an argument passed to a block slides down a waterslide into the block &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|x|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. It’s not a comprehensive introduction, but it’s a lot of fun to read.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://pragprog.com/book/ruby/programming-ruby&quot;&gt;The Pickaxe Book&lt;/a&gt; is a comprehensive introduction to Ruby.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319&quot;&gt;Code&lt;/a&gt; is possibly my favorite book of all time. It walks through the construction of a computer starting with a single wire and a lightbulb, building circuits using digital logic, and finally reaching the operating system. The thing is: this book reads like a novel. It is not a technical reference. Read the whole thing from start to finish—you won’t regret it!
&lt;!-- - [Nand2Tetris][8] is cool. --&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;computer-friends-are-the-best&quot;&gt;Computer friends are the best&lt;/h3&gt;
&lt;p&gt;Computer friends are nice, quirky, and excellent resources. Talking through code is a great debugging strategy and it’s fun to find out you’ve been pronouncing &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod&lt;/code&gt; weird. When I started learning I didn’t know many programmers, so I joined groups like &lt;a href=&quot;https://www.girldevelopit.com&quot;&gt;Girl Develop It&lt;/a&gt; and &lt;a href=&quot;https://www.womenwhocode.com/&quot;&gt;Women Who Code&lt;/a&gt;.&lt;br /&gt;
If you’re excited about programming and want to make a lot more computer friends, consider applying to &lt;a href=&quot;https://www.recurse.com/&quot;&gt;the Recurse Center&lt;/a&gt;!&lt;/p&gt;

</description>
				<pubDate>Tue, 23 May 2017 00:00:00 -0400</pubDate>
				<link>https://nicoleorchard.com/blog/what-should-i-work-on</link>
				<guid isPermaLink="true">https://nicoleorchard.com/blog/what-should-i-work-on</guid>
			</item>
		
	</channel>
</rss>
